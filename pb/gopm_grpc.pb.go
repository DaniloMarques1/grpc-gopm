// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.11
// source: proto/gopm.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PasswordClient is the client API for Password service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PasswordClient interface {
	SavePassword(ctx context.Context, in *CreatePasswordRequest, opts ...grpc.CallOption) (*CreatePasswordResponse, error)
	FindAllKeys(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Keys, error)
	FindPassword(ctx context.Context, in *FindPasswordRequest, opts ...grpc.CallOption) (*PasswordResponse, error)
	DeletePassword(ctx context.Context, in *DeletePasswordRequest, opts ...grpc.CallOption) (*DeletePasswordResponse, error)
}

type passwordClient struct {
	cc grpc.ClientConnInterface
}

func NewPasswordClient(cc grpc.ClientConnInterface) PasswordClient {
	return &passwordClient{cc}
}

func (c *passwordClient) SavePassword(ctx context.Context, in *CreatePasswordRequest, opts ...grpc.CallOption) (*CreatePasswordResponse, error) {
	out := new(CreatePasswordResponse)
	err := c.cc.Invoke(ctx, "/Password/SavePassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *passwordClient) FindAllKeys(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Keys, error) {
	out := new(Keys)
	err := c.cc.Invoke(ctx, "/Password/FindAllKeys", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *passwordClient) FindPassword(ctx context.Context, in *FindPasswordRequest, opts ...grpc.CallOption) (*PasswordResponse, error) {
	out := new(PasswordResponse)
	err := c.cc.Invoke(ctx, "/Password/FindPassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *passwordClient) DeletePassword(ctx context.Context, in *DeletePasswordRequest, opts ...grpc.CallOption) (*DeletePasswordResponse, error) {
	out := new(DeletePasswordResponse)
	err := c.cc.Invoke(ctx, "/Password/DeletePassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PasswordServer is the server API for Password service.
// All implementations must embed UnimplementedPasswordServer
// for forward compatibility
type PasswordServer interface {
	SavePassword(context.Context, *CreatePasswordRequest) (*CreatePasswordResponse, error)
	FindAllKeys(context.Context, *Empty) (*Keys, error)
	FindPassword(context.Context, *FindPasswordRequest) (*PasswordResponse, error)
	DeletePassword(context.Context, *DeletePasswordRequest) (*DeletePasswordResponse, error)
	mustEmbedUnimplementedPasswordServer()
}

// UnimplementedPasswordServer must be embedded to have forward compatible implementations.
type UnimplementedPasswordServer struct {
}

func (UnimplementedPasswordServer) SavePassword(context.Context, *CreatePasswordRequest) (*CreatePasswordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SavePassword not implemented")
}
func (UnimplementedPasswordServer) FindAllKeys(context.Context, *Empty) (*Keys, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindAllKeys not implemented")
}
func (UnimplementedPasswordServer) FindPassword(context.Context, *FindPasswordRequest) (*PasswordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindPassword not implemented")
}
func (UnimplementedPasswordServer) DeletePassword(context.Context, *DeletePasswordRequest) (*DeletePasswordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePassword not implemented")
}
func (UnimplementedPasswordServer) mustEmbedUnimplementedPasswordServer() {}

// UnsafePasswordServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PasswordServer will
// result in compilation errors.
type UnsafePasswordServer interface {
	mustEmbedUnimplementedPasswordServer()
}

func RegisterPasswordServer(s grpc.ServiceRegistrar, srv PasswordServer) {
	s.RegisterService(&Password_ServiceDesc, srv)
}

func _Password_SavePassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PasswordServer).SavePassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Password/SavePassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PasswordServer).SavePassword(ctx, req.(*CreatePasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Password_FindAllKeys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PasswordServer).FindAllKeys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Password/FindAllKeys",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PasswordServer).FindAllKeys(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Password_FindPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindPasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PasswordServer).FindPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Password/FindPassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PasswordServer).FindPassword(ctx, req.(*FindPasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Password_DeletePassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PasswordServer).DeletePassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Password/DeletePassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PasswordServer).DeletePassword(ctx, req.(*DeletePasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Password_ServiceDesc is the grpc.ServiceDesc for Password service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Password_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Password",
	HandlerType: (*PasswordServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SavePassword",
			Handler:    _Password_SavePassword_Handler,
		},
		{
			MethodName: "FindAllKeys",
			Handler:    _Password_FindAllKeys_Handler,
		},
		{
			MethodName: "FindPassword",
			Handler:    _Password_FindPassword_Handler,
		},
		{
			MethodName: "DeletePassword",
			Handler:    _Password_DeletePassword_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/gopm.proto",
}
